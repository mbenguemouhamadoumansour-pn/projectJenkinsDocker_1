pipeline {
    agent any
    
    environment {
        // Configuration DockerHub - √Ä MODIFIER
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USERNAME = 'mouhamadoumbengue'  // √Ä MODIFIER
        
        // Noms des images
        BACKEND_IMAGE = "${DOCKERHUB_USERNAME}/smartphone-backend"
        FRONTEND_IMAGE = "${DOCKERHUB_USERNAME}/smartphone-frontend"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Configuration Kubernetes
        K8S_NAMESPACE = 'smartphone-app'
        K8S_CONTEXT = 'minikube'
        
        // Configuration Ports - AJOUT IMPORTANT
        BACKEND_PORT = '5000'
        FRONTEND_PORT = '80'
        MONGO_PORT = '27017'
        
        // Configuration SonarQube
        SONAR_PROJECT_KEY = 'Smartphone-Management-App'
        
        // Configuration Email
        RECIPIENT_EMAIL = 'mbenguemouhamadoumansour@gmail.com'  // √Ä MODIFIER
    }
    
    stages {
        stage('üßπ Cleanup Workspace') {
            steps {
                echo 'Nettoyage du workspace...'
                cleanWs()
            }
        }
        
        stage('üîÑ Checkout from GitHub') {
            steps {
                echo 'R√©cup√©ration du code depuis GitHub...'
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/mbenguemouhamadoumansour-pn/projectJenkinsDocker_1.git'  // √Ä MODIFIER
            }
        }
        
        stage('üì¶ Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            echo 'Installation des d√©pendances backend...'
                            sh 'npm install'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            echo 'Installation des d√©pendances frontend...'
                            sh 'npm install'
                        }
                    }
                }
            }
        }
        
        stage('üß™ Run Tests') {
            parallel {
                stage('Backend Tests') {
                    steps {
                        dir('backend') {
                            echo 'Ex√©cution des tests backend avec coverage...'
                            sh '''
                                npm test -- --coverage --watchAll=false || true
                            '''
                        }
                    }
                }
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            echo 'Ex√©cution des tests frontend avec coverage...'
                            sh '''
                                CI=true npm test -- --coverage --watchAll=false || true
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üîç SonarQube Analysis') {
            steps {
                echo 'Analyse de la qualit√© du code avec SonarQube...'
                script {
                    def scannerHome = tool 'SonarScanner'
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://localhost:9000
                        """
                    }
                }
            }
        }
        
        stage('üö¶ Quality Gate') {
            steps {
                echo 'V√©rification du Quality Gate SonarQube...'
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline interrompu : Quality Gate √©chou√© avec le statut ${qg.status}"
                        }
                        echo '‚úÖ Quality Gate pass√© avec succ√®s !'
                    }
                }
            }
        }
        
        stage('üê≥ Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('backend') {
                            echo 'Construction de l\'image Docker backend...'
                            sh """
                                docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} .
                                docker tag ${BACKEND_IMAGE}:${IMAGE_TAG} ${BACKEND_IMAGE}:latest
                            """
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('frontend') {
                            echo 'Construction de l\'image Docker frontend...'
                            sh """
                                docker build \
                                  --build-arg REACT_APP_API_URL=http://localhost:${BACKEND_PORT}/api \
                                  -t ${FRONTEND_IMAGE}:${IMAGE_TAG} .
                                docker tag ${FRONTEND_IMAGE}:${IMAGE_TAG} ${FRONTEND_IMAGE}:latest
                            """
                        }
                    }
                }
            }
        }
        
        stage('üì§ Push to DockerHub') {
            steps {
                echo 'Push des images vers DockerHub...'
                script {
                    sh """
                        echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin
                        
                        # Push Backend
                        docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                        docker push ${BACKEND_IMAGE}:latest
                        
                        # Push Frontend
                        docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                        docker push ${FRONTEND_IMAGE}:latest
                        
                        docker logout
                    """
                }
                echo '‚úÖ Images pouss√©es avec succ√®s sur DockerHub'
            }
        }
        
        stage('üöÄ Deploy to Kubernetes') {
            steps {
                echo 'D√©ploiement sur Kubernetes (Minikube)...'
                script {
                    sh '''
                        # Cr√©er le namespace
                        kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        
                        # Cr√©er les ConfigMaps
                        kubectl delete configmap backend-config -n ${K8S_NAMESPACE} --ignore-not-found
                        kubectl create configmap backend-config \
                          --from-literal=MONGODB_URI=mongodb://smartphone-mongo:27017/samadb \
                          --from-literal=PORT=${BACKEND_PORT} \
                          --from-literal=NODE_ENV=production \
                          -n ${K8S_NAMESPACE}
                        
                        # Cr√©er les secrets Docker pour DockerHub
                        kubectl delete secret dockerhub-secret -n ${K8S_NAMESPACE} --ignore-not-found
                        kubectl create secret docker-registry dockerhub-secret \
                          --docker-server=docker.io \
                          --docker-username=${DOCKERHUB_USERNAME} \
                          --docker-password=${DOCKERHUB_CREDENTIALS_PSW} \
                          --docker-email=your-email@example.com \
                          -n ${K8S_NAMESPACE}
                        
                        # Appliquer les manifests Kubernetes
                        kubectl apply -f k8s/namespace.yaml
                        kubectl apply -f k8s/mongodb-pvc.yaml -n ${K8S_NAMESPACE}
                        kubectl apply -f k8s/mongodb-deployment.yaml -n ${K8S_NAMESPACE}
                        kubectl apply -f k8s/backend-deployment.yaml -n ${K8S_NAMESPACE}
                        kubectl apply -f k8s/backend-service.yaml -n ${K8S_NAMESPACE}
                        kubectl apply -f k8s/frontend-deployment.yaml -n ${K8S_NAMESPACE}
                        kubectl apply -f k8s/frontend-service.yaml -n ${K8S_NAMESPACE}
                        
                        echo "Attente du d√©ploiement des pods..."
                        kubectl wait --for=condition=available --timeout=300s deployment/smartphone-backend -n ${K8S_NAMESPACE} || true
                        kubectl wait --for=condition=available --timeout=300s deployment/smartphone-frontend -n ${K8S_NAMESPACE} || true
                    '''
                }
            }
        }
        
        stage('üíö Health Checks') {
            steps {
                echo 'V√©rification de sant√© des services Kubernetes...'
                script {
                    sh '''
                        echo "√âtat des pods..."
                        kubectl get pods -n ${K8S_NAMESPACE}
                        
                        echo "√âtat des services..."
                        kubectl get svc -n ${K8S_NAMESPACE}
                        
                        echo "Attente que MongoDB soit pr√™t..."
                        kubectl wait --for=condition=ready pod -l app=smartphone-mongo -n ${K8S_NAMESPACE} --timeout=300s || true
                        sleep 10
                        
                        echo "Attente que le backend soit pr√™t..."
                        kubectl wait --for=condition=ready pod -l app=smartphone-backend -n ${K8S_NAMESPACE} --timeout=300s || true
                        sleep 10
                        
                        # Port forwarding et test
                        kubectl port-forward -n ${K8S_NAMESPACE} svc/smartphone-backend 5000:5000 &
                        PF_PID=$!
                        sleep 5
                        
                        retry_count=0
                        until curl -f http://localhost:5000/api/health || [ $retry_count -ge 5 ]; do
                            echo "Tentative de connexion au backend... ($retry_count/5)"
                            sleep 5
                            retry_count=$((retry_count + 1))
                        done
                        
                        kill $PF_PID 2>/dev/null || true
                        echo "‚úÖ Backend est op√©rationnel"
                    '''
                }
            }
        }
        
        stage('üìä Display Deployment Info') {
            steps {
                script {
                    sh '''
                        echo "
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           üéâ D√âPLOIEMENT R√âUSSI ! üéâ                      ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üì± Application Smartphone Management                      ‚ïë
‚ïë                                                            ‚ïë
‚ïë  Namespace: ${K8S_NAMESPACE}                               ‚ïë
‚ïë  Context: ${K8S_CONTEXT}                                   ‚ïë
‚ïë                                                            ‚ïë
‚ïë  Pour acc√©der √† l'application :                           ‚ïë
‚ïë  1. Backend :                                              ‚ïë
‚ïë     kubectl port-forward -n ${K8S_NAMESPACE} svc/smartphone-backend 5000:5000
‚ïë  2. Frontend :                                             ‚ïë
‚ïë     kubectl port-forward -n ${K8S_NAMESPACE} svc/smartphone-frontend 80:80
‚ïë                                                            ‚ïë
‚ïë  Puis :                                                    ‚ïë
‚ïë  - Frontend:  http://localhost                            ‚ïë
‚ïë  - Backend:   http://localhost:5000                       ‚ïë
‚ïë  - Health:    http://localhost:5000/api/health            ‚ïë
‚ïë                                                            ‚ïë
‚ïë  üê≥ DockerHub: ${DOCKERHUB_USERNAME}                       ‚ïë
‚ïë  üè∑Ô∏è  Build:     #${BUILD_NUMBER}                           ‚ïë
‚ïë                                                            ‚ïë
‚ïë  Images :                                                  ‚ïë
‚ïë  - ${BACKEND_IMAGE}:${IMAGE_TAG}                          ‚ïë
‚ïë  - ${FRONTEND_IMAGE}:${IMAGE_TAG}                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                        "
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'Nettoyage...'
            sh '''
                docker image prune -f || true
            '''
        }
        
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        
        failure {
            echo '‚ùå Le pipeline a √©chou√© !'
            sh '''
                echo "√âtat du namespace:"
                kubectl describe namespace ${K8S_NAMESPACE} || true
                echo "√âtat des pods:"
                kubectl get pods -n ${K8S_NAMESPACE} || true
                echo "Logs des pods:"
                kubectl logs -n ${K8S_NAMESPACE} -l app=smartphone-backend || true
            '''
        }
    }
}