pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        EC2_HOST = '44.250.219.140' // ⚠️ REMPLACEZ PAR VOTRE IP EC2
        BACKEND_IMAGE = 'mouhamadoumbengue/sama-backend'
        FRONTEND_IMAGE = 'mouhamadoumbengue/sama-frontend'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '📥 Récupération du code...'
                checkout scm
            }
        }
        
        stage('Build Backend') {
            steps {
                echo '🔨 Construction de l\'image backend...'
                script {
                    sh "docker build -t ${BACKEND_IMAGE}:${BUILD_NUMBER} ./backend"
                    sh "docker tag ${BACKEND_IMAGE}:${BUILD_NUMBER} ${BACKEND_IMAGE}:latest"
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                echo '🔨 Construction de l\'image frontend...'
                script {
                    sh """
                        docker build \
                            --build-arg REACT_APP_API_URL=http://${EC2_HOST}:5000/api/smartphones \
                            -t ${FRONTEND_IMAGE}:${BUILD_NUMBER} \
                            ./frontend
                    """
                    sh "docker tag ${FRONTEND_IMAGE}:${BUILD_NUMBER} ${FRONTEND_IMAGE}:latest"
                }
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                echo '📤 Envoi vers DockerHub...'
                script {
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                    sh "docker push ${BACKEND_IMAGE}:${BUILD_NUMBER}"
                    sh "docker push ${BACKEND_IMAGE}:latest"
                    sh "docker push ${FRONTEND_IMAGE}:${BUILD_NUMBER}"
                    sh "docker push ${FRONTEND_IMAGE}:latest"
                }
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                echo '🚀 Déploiement sur EC2...'
                script {
                    sshagent(['ubuntu']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} '
                                # Télécharger docker-compose.yml
                                cd /home/ubuntu
                                
                                # Créer le fichier docker-compose.yml
                                cat > docker-compose.yml << EOF
version: "3.8"

services:
  database:
    image: mongo:7
    container_name: sama-database
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    networks:
      - sama-network

  backend:
    image: ${BACKEND_IMAGE}:latest
    container_name: sama-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://database:27017/samadb
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - sama-network

  frontend:
    image: ${FRONTEND_IMAGE}:latest
    container_name: sama-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - sama-network

volumes:
  mongodb_data:

networks:
  sama-network:
    driver: bridge
EOF

                                # Arrêter les anciens conteneurs
                                docker-compose down || true
                                
                                # Supprimer les anciennes images
                                docker system prune -af
                                
                                # Télécharger les nouvelles images
                                docker pull ${BACKEND_IMAGE}:latest
                                docker pull ${FRONTEND_IMAGE}:latest
                                docker pull mongo:7
                                
                                # Démarrer avec docker-compose
                                docker-compose up -d
                                
                                # Attendre que les services démarrent
                                sleep 10
                                
                                # Vérifier le statut
                                docker-compose ps
                                
                                # Tester le backend
                                curl -f http://localhost:5000/api/smartphones || echo "⚠️ Backend pas encore prêt"
                            '
                        """
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                echo '🧹 Nettoyage des images locales...'
                script {
                    sh "docker rmi ${BACKEND_IMAGE}:${BUILD_NUMBER} || true"
                    sh "docker rmi ${FRONTEND_IMAGE}:${BUILD_NUMBER} || true"
                }
            }
        }
    }
    
    post {
        always {
            sh 'docker logout || true'
        }
        success {
            echo '✅ Déploiement réussi!'
            echo "Frontend: http://${EC2_HOST}"
            echo "Backend: http://${EC2_HOST}:5000/api/smartphones"
        }
        failure {
            echo '❌ Échec du déploiement'
        }
    }
}