pipeline {
    agent any
    
    environment {
        DOCKERHUB_USERNAME = 'mouhamadoumbengue'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        FRONTEND_IMAGE = "${DOCKERHUB_USERNAME}/sama-frontend"
        BACKEND_IMAGE = "${DOCKERHUB_USERNAME}/sama-backend"
        BUILD_TAG = "${BUILD_NUMBER}"
        NOTIFICATION_EMAIL = 'mbenguemouhamadoumansour@gmail.com'
        EC2_HOST = '35.92.219.49' // ‚ö†Ô∏è Remplace par ton IP publique EC2 (ex: 3.92.110.45)
        EC2_USER = 'ubuntu'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì¶ R√©cup√©ration du code depuis GitHub...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            echo 'üì¶ Installation des d√©pendances backend...'
                            sh 'npm install'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            echo 'üì¶ Installation des d√©pendances frontend...'
                            sh 'npm install'
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            parallel {
                stage('Test Backend') {
                    steps {
                        dir('backend') {
                            echo 'üß™ Tests backend...'
                            sh 'npm test || echo "‚ö†Ô∏è Aucun test configur√© pour le backend"'
                        }
                    }
                }
                stage('Test Frontend') {
                    steps {
                        dir('frontend') {
                            echo 'üß™ Tests frontend...'
                            sh 'CI=true npm test || echo "‚ö†Ô∏è Aucun test configur√© pour le frontend"'
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('backend') {
                            echo "üê≥ Construction de l'image backend..."
                            sh "docker build -t ${BACKEND_IMAGE}:${BUILD_TAG} ."
                            sh "docker tag ${BACKEND_IMAGE}:${BUILD_TAG} ${BACKEND_IMAGE}:latest"
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('frontend') {
                            echo "üê≥ Construction de l'image frontend..."
                            sh "docker build -t ${FRONTEND_IMAGE}:${BUILD_TAG} ."
                            sh "docker tag ${FRONTEND_IMAGE}:${BUILD_TAG} ${FRONTEND_IMAGE}:latest"
                        }
                    }
                }
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                echo 'üîë Connexion √† DockerHub...'
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                
                echo 'üì§ Push des images vers DockerHub...'
                sh "docker push ${BACKEND_IMAGE}:${BUILD_TAG}"
                sh "docker push ${BACKEND_IMAGE}:latest"
                sh "docker push ${FRONTEND_IMAGE}:${BUILD_TAG}"
                sh "docker push ${FRONTEND_IMAGE}:latest"
                
                echo '‚úÖ Images publi√©es sur DockerHub avec succ√®s!'
            }
        }

        // üöÄ NOUVELLE √âTAPE : D√©ploiement automatique sur EC2
        stage('Deploy to EC2') {
            steps {
                echo 'üöÄ D√©ploiement sur AWS EC2...'
                
                sshagent(credentials: ['ec2-deploy-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} '
                            cd /home/ubuntu
                            ./deploy.sh
                        '
                    """
                }
                
                echo '‚úÖ D√©ploiement sur EC2 termin√©!'
            }
        }
    }
    
    post {
        success {
            echo 'üéâ Pipeline termin√© avec succ√®s!'
            echo "Images disponibles:"
            echo "  - ${BACKEND_IMAGE}:${BUILD_TAG}"
            echo "  - ${BACKEND_IMAGE}:latest"
            echo "  - ${FRONTEND_IMAGE}:${BUILD_TAG}"
            echo "  - ${FRONTEND_IMAGE}:latest"
            
            emailext (
                subject: "‚úÖ Build #${BUILD_NUMBER} - D√âPLOY√â AVEC SUCC√àS - ${JOB_NAME}",
                body: """
                    <html>
                    <body>
                        <h2 style="color: green;">‚úÖ Application d√©ploy√©e avec succ√®s sur EC2 !</h2>
                        
                        <h3>Informations du build:</h3>
                        <ul>
                            <li><strong>Projet:</strong> ${JOB_NAME}</li>
                            <li><strong>Build:</strong> #${BUILD_NUMBER}</li>
                            <li><strong>Dur√©e:</strong> ${currentBuild.durationString}</li>
                            <li><strong>Date:</strong> ${new Date()}</li>
                        </ul>
                        
                        <h3>URLs de production:</h3>
                        <ul>
                            <li><a href="http://${EC2_HOST}:3000">Frontend: http://${EC2_HOST}:3000</a></li>
                            <li><a href="http://${EC2_HOST}:5000">Backend: http://${EC2_HOST}:5000</a></li>
                        </ul>

                        <h3>Images DockerHub:</h3>
                        <ul>
                            <li>${BACKEND_IMAGE}:${BUILD_TAG}</li>
                            <li>${FRONTEND_IMAGE}:${BUILD_TAG}</li>
                        </ul>

                        <p><a href="${BUILD_URL}">Voir les d√©tails du build</a></p>
                    </body>
                    </html>
                """,
                to: "${NOTIFICATION_EMAIL}",
                mimeType: 'text/html'
            )
        }
        
        failure {
            echo '‚ùå Le pipeline a √©chou√©!'
            
            emailext (
                subject: "‚ùå Build #${BUILD_NUMBER} - √âCHEC D√âPLOIEMENT - ${JOB_NAME}",
                body: """
                    <html>
                    <body>
                        <h2 style="color: red;">‚ùå Le d√©ploiement sur EC2 a √©chou√©</h2>
                        <p>Consultez les logs Jenkins pour identifier la cause de l'√©chec.</p>
                        <p><a href="${BUILD_URL}console" style="color:red; font-weight:bold;">üìã Voir les logs</a></p>
                    </body>
                    </html>
                """,
                to: "${NOTIFICATION_EMAIL}",
                mimeType: 'text/html'
            )
        }

        always {
            echo 'üßπ Nettoyage des images locales...'
            sh """
                docker rmi ${BACKEND_IMAGE}:${BUILD_TAG} || true
                docker rmi ${BACKEND_IMAGE}:latest || true
                docker rmi ${FRONTEND_IMAGE}:${BUILD_TAG} || true
                docker rmi ${FRONTEND_IMAGE}:latest || true
            """
            sh 'docker logout'
        }
    }
}
