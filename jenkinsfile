pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USERNAME = 'mouhamadoumbengue'
        IMAGE_TAG = "${BUILD_NUMBER}"
        K8S_NAMESPACE = 'smartphone-app'
        SONAR_PROJECT_KEY = 'Smartphone-Management-App'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/mbenguemouhamadoumansour-pn/projectJenkinsDocker_1.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install --prefix backend'
                sh 'npm install --prefix frontend'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'npm test --prefix backend || true'
                sh 'CI=true npm test --prefix frontend || true'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                        sonar-scanner \
                          -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=http://sonarqube:9000
                    """
                }
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    sh """
                        echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin

                        docker build -t ${DOCKERHUB_USERNAME}/smartphone-backend:${IMAGE_TAG} backend
                        docker push ${DOCKERHUB_USERNAME}/smartphone-backend:${IMAGE_TAG}

                        docker build -t ${DOCKERHUB_USERNAME}/smartphone-frontend:${IMAGE_TAG} frontend
                        docker push ${DOCKERHUB_USERNAME}/smartphone-frontend:${IMAGE_TAG}

                        docker logout
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh """
                    kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                    kubectl apply -f k8s/ -n ${K8S_NAMESPACE}
                """
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline terminé avec succès'
        }
        failure {
            echo '❌ Pipeline échoué'
        }
    }
}
