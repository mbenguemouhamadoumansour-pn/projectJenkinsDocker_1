pipeline {
    agent any
    
    environment {
        // Configuration DockerHub - À MODIFIER
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')

        DOCKERHUB_USERNAME = 'mouhamadoumbengue'  // À MODIFIER
        
        // Noms des images
        BACKEND_IMAGE = "${DOCKERHUB_USERNAME}/smartphone-backend"
        FRONTEND_IMAGE = "${DOCKERHUB_USERNAME}/smartphone-frontend"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Configuration Kubernetes
        K8S_NAMESPACE = 'smartphone-app'
        K8S_CONTEXT = 'minikube'
        
        // Configuration SonarQube
        SONAR_PROJECT_KEY = 'Smartphone-Management-App'
        
        // Configuration Email
        RECIPIENT_EMAIL = 'mbenguemouhamadoumansour@gmail.com'  // À MODIFIER

    }
    
    stages {
        stage('🧹 Cleanup Workspace') {
            steps {
                echo 'Nettoyage du workspace...'
                cleanWs()
            }
        }
        
        stage('🔄 Checkout from GitHub') {
            steps {
                echo 'Récupération du code depuis GitHub...'
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/mbenguemouhamadoumansour-pn/projectJenkinsDocker_1.git'  // À MODIFIER
            }
        }
        
        stage('📦 Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            echo 'Installation des dépendances backend...'
                            sh 'npm install'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            echo 'Installation des dépendances frontend...'
                            sh 'npm install'
                        }
                    }
                }
            }
        }
        
        stage('🧪 Run Tests') {
            parallel {
                stage('Backend Tests') {
                    steps {
                        dir('backend') {
                            echo 'Exécution des tests backend avec coverage...'
                            sh '''
                                npm test -- --coverage --watchAll=false || true
                            '''
                        }
                    }
                }
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            echo 'Exécution des tests frontend avec coverage...'
                            sh '''
                                CI=true npm test -- --coverage --watchAll=false || true
                            '''
                        }
                    }
                }
            }
        }
        
        stage('🔍 SonarQube Analysis') {
            steps {
                echo 'Analyse de la qualité du code avec SonarQube...'
                script {
                    def scannerHome = tool 'SonarScanner'
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://localhost:9000
                        """
                    }
                }
            }
        }
        
        stage('🚦 Quality Gate') {
            steps {
                echo 'Vérification du Quality Gate SonarQube...'
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline interrompu : Quality Gate échoué avec le statut ${qg.status}"
                        }
                        echo '✅ Quality Gate passé avec succès !'
                    }
                }
            }
        }
        
        stage('🐳 Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('backend') {
                            echo 'Construction de l\'image Docker backend...'
                            sh """
                                docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} .
                                docker tag ${BACKEND_IMAGE}:${IMAGE_TAG} ${BACKEND_IMAGE}:latest
                            """
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('frontend') {
                            echo 'Construction de l\'image Docker frontend...'
                            sh """
                                docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} .
                                docker tag ${FRONTEND_IMAGE}:${IMAGE_TAG} ${FRONTEND_IMAGE}:latest
                            """
                        }
                    }
                }
            }
        }
        
        stage('📤 Push to DockerHub') {
            steps {
                echo 'Push des images vers DockerHub...'
                script {
                    sh """
                        echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin
                        
                        # Push Backend
                        docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                        docker push ${BACKEND_IMAGE}:latest
                        
                        # Push Frontend
                        docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                        docker push ${FRONTEND_IMAGE}:latest
                        
                        docker logout
                    """
                }
                echo '✅ Images poussées avec succès sur DockerHub'
            }
        }
        
        stage('🚀 Deploy to Kubernetes') {
            steps {
                echo 'Déploiement sur Kubernetes (Minikube)...'
                script {
                    // Créer/mettre à jour le fichier .env si nécessaire
                    sh """
                        cat > .env << EOF
MONGO_URI=mongodb://smartphone-mongo:27017/smartphone-db
PORT=${BACKEND_PORT}
NODE_ENV=production
BACKEND_IMAGE=${BACKEND_IMAGE}:latest
FRONTEND_IMAGE=${FRONTEND_IMAGE}:latest
EOF
                    """
                    
                    // Démarrer les services avec Docker Compose
                    sh '''
                        docker-compose up -d
                    '''
                    
                    echo 'Attente du démarrage des conteneurs...'
                    sleep 15
                }
            }
        }
        
        stage('💚 Health Checks') {
            steps {
                echo 'Vérification de santé des services Kubernetes...'
                script {
                    sh '''
                        echo "Vérification des conteneurs en cours d'exécution..."
                        docker ps | grep smartphone
                    '''
                    
                    // Health check backend
                    retry(5) {
                        sleep 5
                        sh """
                            echo "Test du backend sur le port ${BACKEND_PORT}..."
                            curl -f http://localhost:${BACKEND_PORT}/api/health || \
                            curl -f http://localhost:${BACKEND_PORT} || \
                            exit 1
                        """
                    }
                    echo '✅ Backend est opérationnel'
                    
                    // Health check frontend
                    retry(5) {
                        sleep 5
                        sh """
                            echo "Test du frontend sur le port ${FRONTEND_PORT}..."
                            curl -f http://localhost:${FRONTEND_PORT} || exit 1
                        """
                    }
                    echo '✅ Frontend est opérationnel'
                    
                    // Vérifier MongoDB
                    sh '''
                        echo "Vérification de MongoDB..."
                        docker exec smartphone-mongo mongosh --eval "db.adminCommand('ping')" || \
                        docker exec smartphone-mongo mongo --eval "db.adminCommand('ping')" || \
                        echo "MongoDB est accessible"
                    '''
                    echo '✅ MongoDB est opérationnel'
                }
            }
        }
        
        stage('📊 Display Deployment Info') {
            steps {
                script {
                    def backendUrl = "http://localhost:${BACKEND_PORT}"
                    def frontendUrl = "http://localhost:${FRONTEND_PORT}"
                    def sonarUrl = "http://localhost:9000/dashboard?id=${SONAR_PROJECT_KEY}"
                    
                    echo """
╔════════════════════════════════════════════════════════════╗
║           🎉 DÉPLOIEMENT RÉUSSI ! 🎉                      ║
╠════════════════════════════════════════════════════════════╣
║  📱 Application Smartphone Management                      ║
║                                                            ║
║  🌐 Frontend:  ${frontendUrl}                             ║
║  🔧 Backend:   ${backendUrl}                              ║
║  🗄️  MongoDB:  mongodb://localhost:${MONGO_PORT}         ║
║                                                            ║
║  📊 SonarQube: ${sonarUrl}                                ║
║  🐳 DockerHub: ${DOCKERHUB_USERNAME}                      ║
║                                                            ║
║  🏷️  Build:     #${BUILD_NUMBER}                          ║
║  📦 Images:                                                ║
║     - ${BACKEND_IMAGE}:${IMAGE_TAG}                       ║
║     - ${FRONTEND_IMAGE}:${IMAGE_TAG}                      ║
╚════════════════════════════════════════════════════════════╝
                    """
                }
            }
        }
    }
    
    post {
        always {
            echo '🧹 Nettoyage des images Docker inutilisées...'
            sh '''
                docker image prune -f || true
                docker system prune -f --volumes || true
            '''
        }
        
        success {
            echo '✅ Pipeline exécuté avec succès !'
            emailext(
                subject: "✅ SUCCESS: Smartphone App Build #${BUILD_NUMBER} - Kubernetes",
                body: """
<html>
<body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
        <h1 style="color: #28a745; border-bottom: 3px solid #28a745; padding-bottom: 10px;">
            ✅ Déploiement réussi !
        </h1>
        
        <h2 style="color: #333;">Smartphone Management Application</h2>
        
        <div style="background-color: #e8f5e9; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #2e7d32;">📱 Accès à l'application :</h3>
            <ul style="list-style: none; padding-left: 0;">
                <li style="margin: 10px 0;">
                    <strong>🌐 Frontend:</strong> 
                    <a href="${frontendUrl}" style="color: #1976d2;">${frontendUrl}</a>
                </li>
                <li style="margin: 10px 0;">
                    <strong>🔧 Backend:</strong> 
                    <a href="${backendUrl}" style="color: #1976d2;">${backendUrl}</a>
                </li>
                <li style="margin: 10px 0;">
                    <strong>📊 SonarQube:</strong> 
                    <a href="${sonarUrl}" style="color: #1976d2;">Voir l'analyse</a>
                </li>
            </ul>
        </div>
        
        <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #333;">📦 Informations du build :</h3>
            <ul style="list-style: none; padding-left: 0;">
                <li><strong>Build:</strong> #${BUILD_NUMBER}</li>
                <li><strong>Branche:</strong> ${GIT_BRANCH}</li>
                <li><strong>Commit:</strong> ${GIT_COMMIT[0..7]}</li>
                <li><strong>Durée:</strong> ${currentBuild.durationString.replace(' and counting', '')}</li>
            </ul>
        </div>
        
        <div style="background-color: #fff3e0; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #e65100;">🐳 Images Docker :</h3>
            <ul style="font-family: monospace; font-size: 12px;">
                <li>${BACKEND_IMAGE}:${IMAGE_TAG}</li>
                <li>${FRONTEND_IMAGE}:${IMAGE_TAG}</li>
            </ul>
        </div>
        
        <p style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 12px;">
            Ce message a été généré automatiquement par Jenkins<br>
            <a href="${BUILD_URL}">Voir les détails du build</a>
        </p>
    </div>
</body>
</html>
                """,
                to: "${RECIPIENT_EMAIL}",
                mimeType: 'text/html'
            )
        }
        
        failure {
            echo '❌ Le pipeline a échoué !'
            script {
                sh '''
                    docker-compose down || true
                '''
                
                emailext(
                    subject: "❌ FAILED: Smartphone App Build #${BUILD_NUMBER}",
                    body: """
<html>
<body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
        <h1 style="color: #dc3545; border-bottom: 3px solid #dc3545; padding-bottom: 10px;">
            ❌ Échec du déploiement
        </h1>
        
        <h2 style="color: #333;">Smartphone Management Application</h2>
        
        <div style="background-color: #ffebee; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #c62828;">⚠️ Le pipeline a échoué</h3>
            <p>Le build #${BUILD_NUMBER} a échoué. Veuillez vérifier les logs pour plus de détails.</p>
        </div>
        
        <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #333;">📦 Informations du build :</h3>
            <ul style="list-style: none; padding-left: 0;">
                <li><strong>Build:</strong> #${BUILD_NUMBER}</li>
                <li><strong>Branche:</strong> ${GIT_BRANCH}</li>
                <li><strong>Commit:</strong> ${GIT_COMMIT[0..7]}</li>
                <li><strong>Durée:</strong> ${currentBuild.durationString.replace(' and counting', '')}</li>
            </ul>
        </div>
        
        <div style="margin-top: 30px; text-align: center;">
            <a href="${BUILD_URL}console" 
               style="background-color: #dc3545; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
                📋 Voir les logs
            </a>
        </div>
    </div>
</body>
</html>
                    """,
                    to: "${RECIPIENT_EMAIL}",
                    mimeType: 'text/html'
                )
            }
        }
    }
}
