pipeline {
    agent any
    
    environment {
        DOCKERHUB_USERNAME = 'mouhamadoumbengue'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        FRONTEND_IMAGE = "${DOCKERHUB_USERNAME}/sama-frontend"
        BACKEND_IMAGE = "${DOCKERHUB_USERNAME}/sama-backend"
        BUILD_TAG = "${BUILD_NUMBER}"
        NOTIFICATION_EMAIL = 'mbenguemouhamadoumansour@gmail.com'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'R√©cup√©ration du code depuis GitHub...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            echo 'Installation des d√©pendances backend...'
                            sh 'npm install'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            echo 'Installation des d√©pendances frontend...'
                            sh 'npm install'
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            parallel {
                stage('Test Backend') {
                    steps {
                        dir('backend') {
                            echo 'Tests backend...'
                            sh 'npm test || echo "‚ö†Ô∏è Aucun test configur√© pour le backend"'
                        }
                    }
                }
                stage('Test Frontend') {
                    steps {
                        dir('frontend') {
                            echo 'Tests frontend...'
                            sh 'CI=true npm test || echo "‚ö†Ô∏è Aucun test configur√© pour le frontend"'
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('backend') {
                            echo "Construction de l'image backend..."
                            sh "docker build -t ${BACKEND_IMAGE}:${BUILD_TAG} ."
                            sh "docker tag ${BACKEND_IMAGE}:${BUILD_TAG} ${BACKEND_IMAGE}:latest"
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('frontend') {
                            echo "Construction de l'image frontend..."
                            sh "docker build -t ${FRONTEND_IMAGE}:${BUILD_TAG} ."
                            sh "docker tag ${FRONTEND_IMAGE}:${BUILD_TAG} ${FRONTEND_IMAGE}:latest"
                        }
                    }
                }
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                echo 'Connexion √† DockerHub...'
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                
                echo 'Push des images vers DockerHub...'
                sh "docker push ${BACKEND_IMAGE}:${BUILD_TAG}"
                sh "docker push ${BACKEND_IMAGE}:latest"
                sh "docker push ${FRONTEND_IMAGE}:${BUILD_TAG}"
                sh "docker push ${FRONTEND_IMAGE}:latest"
                
                echo '‚úÖ Images publi√©es sur DockerHub avec succ√®s!'
            }
        }
    }
    
    post {
        success {
            echo 'üéâ Pipeline termin√© avec succ√®s!'
            echo "Images disponibles:"
            echo "  - ${BACKEND_IMAGE}:${BUILD_TAG}"
            echo "  - ${BACKEND_IMAGE}:latest"
            echo "  - ${FRONTEND_IMAGE}:${BUILD_TAG}"
            echo "  - ${FRONTEND_IMAGE}:latest"
            
            emailext (
                subject: "‚úÖ Build #${BUILD_NUMBER} - SUCC√àS - ${JOB_NAME}",
                body: """
                    <html>
                    <body>
                        <h2 style="color: green;">‚úÖ Pipeline ex√©cut√© avec succ√®s !</h2>
                        
                        <h3>Informations du build:</h3>
                        <ul>
                            <li><strong>Projet:</strong> ${JOB_NAME}</li>
                            <li><strong>Build:</strong> #${BUILD_NUMBER}</li>
                            <li><strong>Dur√©e:</strong> ${currentBuild.durationString}</li>
                            <li><strong>Date:</strong> ${new Date()}</li>
                        </ul>
                        
                        <h3>Images Docker publi√©es sur DockerHub:</h3>
                        <ul>
                            <li>${BACKEND_IMAGE}:${BUILD_TAG}</li>
                            <li>${BACKEND_IMAGE}:latest</li>
                            <li>${FRONTEND_IMAGE}:${BUILD_TAG}</li>
                            <li>${FRONTEND_IMAGE}:latest</li>
                        </ul>
                        
                        <h3>Changements Git:</h3>
                        <p>${currentBuild.changeSets.collect { it.items.collect { "${it.author}: ${it.msg}" }.join('<br>') }.join('<br>')}</p>
                        
                        <p><a href="${BUILD_URL}">Voir les d√©tails du build</a></p>
                        <p><a href="https://hub.docker.com/u/${DOCKERHUB_USERNAME}">Voir sur DockerHub</a></p>
                    </body>
                    </html>
                """,
                to: "${NOTIFICATION_EMAIL}",
                mimeType: 'text/html'
            )
        }
        
        failure {
            echo '‚ùå Le pipeline a √©chou√©!'
            
            emailext (
                subject: "‚ùå Build #${BUILD_NUMBER} - √âCHEC - ${JOB_NAME}",
                body: """
                    <html>
                    <body>
                        <h2 style="color: red;">‚ùå Pipeline √©chou√© !</h2>
                        
                        <h3>Informations du build:</h3>
                        <ul>
                            <li><strong>Projet:</strong> ${JOB_NAME}</li>
                            <li><strong>Build:</strong> #${BUILD_NUMBER}</li>
                            <li><strong>Dur√©e:</strong> ${currentBuild.durationString}</li>
                            <li><strong>Date:</strong> ${new Date()}</li>
                        </ul>
                        
                        <h3>Erreur d√©tect√©e:</h3>
                        <p>Le build a √©chou√©. Veuillez consulter les logs pour plus de d√©tails.</p>
                        
                        <h3>Changements Git:</h3>
                        <p>${currentBuild.changeSets.collect { it.items.collect { "${it.author}: ${it.msg}" }.join('<br>') }.join('<br>')}</p>
                        
                        <p><a href="${BUILD_URL}console" style="color: red; font-weight: bold;">üìã Voir les logs complets</a></p>
                        <p><a href="${BUILD_URL}">Voir les d√©tails du build</a></p>
                        
                        <p style="color: #666; font-size: 12px;">Veuillez corriger l'erreur et pousser les modifications sur GitHub.</p>
                    </body>
                    </html>
                """,
                to: "${NOTIFICATION_EMAIL}",
                mimeType: 'text/html'
            )
        }
        
        unstable {
            emailext (
                subject: "‚ö†Ô∏è Build #${BUILD_NUMBER} - INSTABLE - ${JOB_NAME}",
                body: """
                    <html>
                    <body>
                        <h2 style="color: orange;">‚ö†Ô∏è Pipeline instable</h2>
                        
                        <h3>Informations du build:</h3>
                        <ul>
                            <li><strong>Projet:</strong> ${JOB_NAME}</li>
                            <li><strong>Build:</strong> #${BUILD_NUMBER}</li>
                            <li><strong>Dur√©e:</strong> ${currentBuild.durationString}</li>
                        </ul>
                        
                        <p>Le build s'est termin√© mais avec des avertissements ou des tests instables.</p>
                        
                        <p><a href="${BUILD_URL}">Voir les d√©tails</a></p>
                    </body>
                    </html>
                """,
                to: "${NOTIFICATION_EMAIL}",
                mimeType: 'text/html'
            )
        }
        
        changed {
            script {
                def previousResult = currentBuild.previousBuild?.result
                def currentResult = currentBuild.result
                
                if (previousResult == 'FAILURE' && currentResult == 'SUCCESS') {
                    emailext (
                        subject: "üéâ Build #${BUILD_NUMBER} - R√âPAR√â - ${JOB_NAME}",
                        body: """
                            <html>
                            <body>
                                <h2 style="color: green;">üéâ Le build est r√©par√© !</h2>
                                
                                <p>Le pipeline fonctionne √† nouveau apr√®s avoir √©t√© en √©chec.</p>
                                
                                <h3>Informations:</h3>
                                <ul>
                                    <li><strong>Projet:</strong> ${JOB_NAME}</li>
                                    <li><strong>Build:</strong> #${BUILD_NUMBER}</li>
                                    <li><strong>Statut pr√©c√©dent:</strong> ${previousResult}</li>
                                    <li><strong>Statut actuel:</strong> ${currentResult}</li>
                                </ul>
                                
                                <p><a href="${BUILD_URL}">Voir les d√©tails</a></p>
                            </body>
                            </html>
                        """,
                        to: "${NOTIFICATION_EMAIL}",
                        mimeType: 'text/html'
                    )
                } else if (previousResult == 'SUCCESS' && currentResult == 'FAILURE') {
                    emailext (
                        subject: "üö® Build #${BUILD_NUMBER} - CASS√â - ${JOB_NAME}",
                        body: """
                            <html>
                            <body>
                                <h2 style="color: red;">üö® Le build vient de casser !</h2>
                                
                                <p>Le pipeline fonctionnait et vient de tomber en √©chec.</p>
                                
                                <h3>Informations:</h3>
                                <ul>
                                    <li><strong>Projet:</strong> ${JOB_NAME}</li>
                                    <li><strong>Build:</strong> #${BUILD_NUMBER}</li>
                                    <li><strong>Statut pr√©c√©dent:</strong> ${previousResult}</li>
                                    <li><strong>Statut actuel:</strong> ${currentResult}</li>
                                </ul>
                                
                                <p><a href="${BUILD_URL}console" style="color: red; font-weight: bold;">Voir les logs</a></p>
                            </body>
                            </html>
                        """,
                        to: "${NOTIFICATION_EMAIL}",
                        mimeType: 'text/html'
                    )
                }
            }
        }
        
        always {
            echo 'Nettoyage des images locales...'
            sh """
                docker rmi ${BACKEND_IMAGE}:${BUILD_TAG} || true
                docker rmi ${BACKEND_IMAGE}:latest || true
                docker rmi ${FRONTEND_IMAGE}:${BUILD_TAG} || true
                docker rmi ${FRONTEND_IMAGE}:latest || true
            """
            sh 'docker logout'
        }
    }
}