pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USERNAME = 'mouhamadoumbengue'
        
        BACKEND_IMAGE = "${DOCKERHUB_USERNAME}/smartphone-backend"
        FRONTEND_IMAGE = "${DOCKERHUB_USERNAME}/smartphone-frontend"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        K8S_NAMESPACE = 'smartphone-app'
        SONAR_PROJECT_KEY = 'Smartphone-Management-App'
    }
    
    stages {
        stage('üßπ Cleanup') {
            steps {
                echo 'Nettoyage du workspace...'
                cleanWs()
            }
        }
        
        stage('üîÑ Checkout') {
            steps {
                echo 'R√©cup√©ration du code...'
                git branch: 'main',
                    url: 'https://github.com/mbenguemouhamadoumansour-pn/projectJenkinsDocker_1.git'
            }
        }
        
        stage('üì¶ Install Dependencies') {
            parallel {
                stage('Backend') {
                    steps {
                        dir('backend') {
                            sh 'npm install'
                        }
                    }
                }
                stage('Frontend') {
                    steps {
                        dir('frontend') {
                            sh 'npm install'
                        }
                    }
                }
            }
        }
        
        stage('üß™ Tests') {
            parallel {
                stage('Backend') {
                    steps {
                        dir('backend') {
                            sh 'npm test -- --coverage --watchAll=false || true'
                        }
                    }
                }
                stage('Frontend') {
                    steps {
                        dir('frontend') {
                            sh 'CI=true npm test -- --coverage --watchAll=false || true'
                        }
                    }
                }
            }
        }
        
        stage('üîç SonarQube') {
            steps {
                echo 'Analyse SonarQube...'
                script {
                    def scannerHome = tool 'SonarScanner'
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://localhost:9000
                        """
                    }
                }
            }
        }
        
        stage('üö¶ Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        try {
                            def qg = waitForQualityGate()
                            echo "Quality Gate: ${qg.status}"
                        } catch (Exception e) {
                            echo "QG check - continuing anyway"
                        }
                    }
                }
            }
        }
        
        stage('üê≥ Build Docker') {
            parallel {
                stage('Backend') {
                    steps {
                        dir('backend') {
                            sh """
                                docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} .
                                docker tag ${BACKEND_IMAGE}:${IMAGE_TAG} ${BACKEND_IMAGE}:latest
                            """
                        }
                    }
                }
                stage('Frontend') {
                    steps {
                        dir('frontend') {
                            sh """
                                docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} .
                                docker tag ${FRONTEND_IMAGE}:${IMAGE_TAG} ${FRONTEND_IMAGE}:latest
                            """
                        }
                    }
                }
            }
        }
        
        stage('üì§ Push DockerHub') {
            steps {
                sh """
                    echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin
                    docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                    docker push ${BACKEND_IMAGE}:latest
                    docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                    docker push ${FRONTEND_IMAGE}:latest
                    docker logout
                """
            }
        }
        
        stage('üöÄ Deploy to Kubernetes') {
            steps {
                sh '''
                    export KUBECONFIG=/root/.kube/config
                    
                    # Cr√©er le namespace
                    kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                    
                    # Cr√©er le ConfigMap
                    kubectl delete configmap backend-config -n ${K8S_NAMESPACE} --ignore-not-found || true
                    kubectl create configmap backend-config \
                      --from-literal=MONGODB_URI=mongodb://smartphone-mongo:27017/samadb \
                      --from-literal=PORT=5000 \
                      --from-literal=NODE_ENV=production \
                      -n ${K8S_NAMESPACE}
                    
                    # Cr√©er le secret Docker
                    kubectl delete secret dockerhub-secret -n ${K8S_NAMESPACE} --ignore-not-found || true
                    kubectl create secret docker-registry dockerhub-secret \
                      --docker-server=docker.io \
                      --docker-username=${DOCKERHUB_USERNAME} \
                      --docker-password=${DOCKERHUB_CREDENTIALS_PSW} \
                      --docker-email=jenkins@example.com \
                      -n ${K8S_NAMESPACE}
                    
                    # Appliquer les fichiers Kubernetes
                    kubectl apply -f k8s/namespace.yaml
                    kubectl apply -f k8s/mongodb-pvc.yaml -n ${K8S_NAMESPACE}
                    kubectl apply -f k8s/mongodb-deployment.yaml -n ${K8S_NAMESPACE}
                    kubectl apply -f k8s/backend-deployment.yaml -n ${K8S_NAMESPACE}
                    kubectl apply -f k8s/backend-service.yaml -n ${K8S_NAMESPACE}
                    kubectl apply -f k8s/frontend-deployment.yaml -n ${K8S_NAMESPACE}
                    kubectl apply -f k8s/frontend-service.yaml -n ${K8S_NAMESPACE}
                    
                    # Attendre le d√©ploiement
                    echo "Attente du d√©ploiement..."
                    sleep 30
                    kubectl get pods -n ${K8S_NAMESPACE}
                '''
            }
        }
        
        stage('‚úÖ Verification') {
            steps {
                sh '''
                    export KUBECONFIG=/root/.kube/config
                    
                    echo "=== √âtat des Pods ==="
                    kubectl get pods -n ${K8S_NAMESPACE}
                    
                    echo ""
                    echo "=== √âtat des Services ==="
                    kubectl get svc -n ${K8S_NAMESPACE}
                    
                    echo ""
                    echo "‚úÖ D√©ploiement r√©ussi!"
                    echo ""
                    echo "Pour acc√©der √† l'application:"
                    echo "kubectl port-forward -n ${K8S_NAMESPACE} svc/smartphone-backend 5000:5000"
                    echo "kubectl port-forward -n ${K8S_NAMESPACE} svc/smartphone-frontend 8080:80"
                '''
            }
        }
    }
    
    post {
        always {
            sh 'docker image prune -f || true'
        }
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s!'
        }
        failure {
            echo '‚ùå Pipeline √©chou√©'
        }
    }
}