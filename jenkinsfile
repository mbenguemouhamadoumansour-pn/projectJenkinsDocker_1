pipeline {
    agent any
    
    environment {
        // Configuration DockerHub
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USERNAME = 'mouhamadoumbengue'
        
        // Noms des images
        BACKEND_IMAGE = "${DOCKERHUB_USERNAME}/smartphone-backend"
        FRONTEND_IMAGE = "${DOCKERHUB_USERNAME}/smartphone-frontend"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Configuration Kubernetes
        K8S_NAMESPACE = 'smartphone-app'
        K8S_CONTEXT = 'minikube'
        
        // Configuration SonarQube
        SONAR_PROJECT_KEY = 'Smartphone-Management-App'
        
        // Configuration Email
        RECIPIENT_EMAIL = 'mbenguemouhamadoumansour@gmail.com'
    }
    
    stages {
        stage('🧹 Cleanup Workspace') {
            steps {
                echo 'Nettoyage du workspace...'
                cleanWs()
            }
        }
        
        stage('🔄 Checkout from GitHub') {
            steps {
                echo 'Récupération du code depuis GitHub...'
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/mbenguemouhamadoumansour-pn/projectJenkinsDocker_1.git'
            }
        }
        
        stage('📦 Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            echo 'Installation des dépendances backend...'
                            sh 'npm install'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            echo 'Installation des dépendances frontend...'
                            sh 'npm install'
                        }
                    }
                }
            }
        }
        
        stage('🧪 Run Tests') {
            parallel {
                stage('Backend Tests') {
                    steps {
                        dir('backend') {
                            echo 'Exécution des tests backend...'
                            sh 'npm test -- --coverage --watchAll=false || true'
                        }
                    }
                }
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            echo 'Exécution des tests frontend...'
                            sh 'CI=true npm test -- --coverage --watchAll=false || true'
                        }
                    }
                }
            }
        }
        
        stage('🔍 SonarQube Analysis') {
            steps {
                echo 'Analyse de la qualité du code avec SonarQube...'
                script {
                    def scannerHome = tool 'SonarScanner'
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://localhost:9000
                        """
                    }
                }
            }
        }
        
        stage('🚦 Quality Gate') {
            steps {
                echo 'Vérification du Quality Gate SonarQube...'
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline interrompu : Quality Gate échoué avec le statut ${qg.status}"
                        }
                        echo '✅ Quality Gate passé avec succès !'
                    }
                }
            }
        }
        
        stage('🐳 Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('backend') {
                            echo 'Construction de l\'image Docker backend...'
                            sh """
                                docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} .
                                docker tag ${BACKEND_IMAGE}:${IMAGE_TAG} ${BACKEND_IMAGE}:latest
                            """
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('frontend') {
                            echo 'Construction de l\'image Docker frontend...'
                            sh """
                                docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} .
                                docker tag ${FRONTEND_IMAGE}:${IMAGE_TAG} ${FRONTEND_IMAGE}:latest
                            """
                        }
                    }
                }
            }
        }
        
        stage('📤 Push to DockerHub') {
            steps {
                echo 'Push des images vers DockerHub...'
                script {
                    sh """
                        echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin
                        
                        # Push Backend
                        docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                        docker push ${BACKEND_IMAGE}:latest
                        
                        # Push Frontend
                        docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                        docker push ${FRONTEND_IMAGE}:latest
                        
                        docker logout
                    """
                }
                echo '✅ Images poussées avec succès sur DockerHub'
            }
        }
        
        stage('🚀 Deploy to Kubernetes') {
            steps {
                echo 'Déploiement sur Kubernetes (Minikube)...'
                script {
                    sh """
                        # Vérifier la connexion à Kubernetes
                        kubectl cluster-info
                        
                        # Créer le namespace s'il n'existe pas
                        kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        
                        # Appliquer les manifests Kubernetes
                        kubectl apply -k k8s/
                        
                        # Attendre que les deployments soient prêts
                        kubectl rollout status deployment/mongodb -n ${K8S_NAMESPACE} --timeout=5m
                        kubectl rollout status deployment/smartphone-backend -n ${K8S_NAMESPACE} --timeout=5m
                        kubectl rollout status deployment/smartphone-frontend -n ${K8S_NAMESPACE} --timeout=5m
                    """
                }
                echo '✅ Déploiement sur Kubernetes réussi !'
            }
        }
        
        stage('💚 Health Checks') {
            steps {
                echo 'Vérification de santé des services Kubernetes...'
                script {
                    sh '''
                        echo "Attente de la disponibilité des pods..."
                        sleep 10
                        
                        echo "Vérification des pods..."
                        kubectl get pods -n smartphone-app
                        
                        echo "Vérification des services..."
                        kubectl get svc -n smartphone-app
                        
                        echo "Vérification des logs backend..."
                        kubectl logs -n smartphone-app -l app=smartphone-backend --tail=50
                    '''
                }
                echo '✅ Santé des services vérifiée !'
            }
        }
        
        stage('📊 Display Deployment Info') {
            steps {
                script {
                    sh '''
                        echo ""
                        echo "╔════════════════════════════════════════════════════════════╗"
                        echo "║           🎉 DÉPLOIEMENT KUBERNETES RÉUSSI ! 🎉             ║"
                        echo "╠════════════════════════════════════════════════════════════╣"
                        echo "║  📱 Application Smartphone Management                      ║"
                        echo "║                                                            ║"
                        echo "║  🌐 Frontend: http://localhost:30080                       ║"
                        echo "║  🔧 Backend:  http://localhost:5000                        ║"
                        echo "║  🗄️  MongoDB: mongodb://localhost:27017                    ║"
                        echo "║  📊 SonarQube: http://localhost:9000                       ║"
                        echo "║                                                            ║"
                        echo "║  🏷️  Build:     #${BUILD_NUMBER}                           ║"
                        echo "║  📦 Namespace: ${K8S_NAMESPACE}                            ║"
                        echo "║  ☸️  Context:   ${K8S_CONTEXT}                             ║"
                        echo "║                                                            ║"
                        echo "║  📋 Pods Kubernetes:                                       ║"
                        kubectl get pods -n smartphone-app | tail -n +2 | awk '{printf "║  • %s\\n", $0}'
                        echo "║                                                            ║"
                        echo "╚════════════════════════════════════════════════════════════╝"
                        echo ""
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'Nettoyage des images Docker inutilisées...'
            sh '''
                docker image prune -f || true
                docker system prune -f --volumes || true
            '''
        }
        
        success {
            echo '✅ Pipeline exécuté avec succès !'
            emailext(
                subject: "✅ SUCCESS: Smartphone App Build #${BUILD_NUMBER} - Kubernetes",
                body: """
<html>
<body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px;">
        <h1 style="color: #28a745; border-bottom: 3px solid #28a745; padding-bottom: 10px;">
            ✅ Déploiement Kubernetes réussi !
        </h1>
        
        <div style="background-color: #e8f5e9; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #2e7d32;">📱 Accès à l'application :</h3>
            <ul style="list-style: none; padding-left: 0;">
                <li style="margin: 10px 0;">
                    <strong>Frontend:</strong> <a href="http://localhost:30080" style="color: #1976d2;">http://localhost:30080</a>
                </li>
                <li style="margin: 10px 0;">
                    <strong>Backend:</strong> <a href="http://localhost:5000" style="color: #1976d2;">http://localhost:5000</a>
                </li>
                <li style="margin: 10px 0;">
                    <strong>SonarQube:</strong> <a href="http://localhost:9000" style="color: #1976d2;">http://localhost:9000</a>
                </li>
            </ul>
        </div>
        
        <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #333;">📦 Informations Kubernetes :</h3>
            <ul style="list-style: none; padding-left: 0;">
                <li><strong>Build:</strong> #${BUILD_NUMBER}</li>
                <li><strong>Namespace:</strong> smartphone-app</li>
                <li><strong>Context:</strong> minikube</li>
                <li><strong>Status:</strong> Tous les services sont déployés et sains</li>
            </ul>
        </div>
        
        <p style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 12px;">
            Ce message a été généré automatiquement par Jenkins
        </p>
    </div>
</body>
</html>
                """,
                to: "${RECIPIENT_EMAIL}",
                mimeType: 'text/html'
            )
        }
        
        failure {
            echo '❌ Le pipeline a échoué !'
            emailext(
                subject: "❌ FAILED: Smartphone App Build #${BUILD_NUMBER}",
                body: """
<html>
<body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px;">
        <h1 style="color: #dc3545; border-bottom: 3px solid #dc3545; padding-bottom: 10px;">
            ❌ Échec du déploiement
        </h1>
        
        <p>Le build #${BUILD_NUMBER} a échoué. Veuillez vérifier les logs pour plus de détails.</p>
        
        <div style="margin-top: 30px; text-align: center;">
            <a href="${BUILD_URL}console" 
               style="background-color: #dc3545; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
                📋 Voir les logs
            </a>
        </div>
    </div>
</body>
</html>
                """,
                to: "${RECIPIENT_EMAIL}",
                mimeType: 'text/html'
            )
        }
    }
}