pipeline {
    agent any
    
    environment {
        // Configuration DockerHub - À MODIFIER
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USERNAME = 'mouhamadoumbengue'  // ⚠️ MODIFIEZ ICI
        
        // Noms des images
        BACKEND_IMAGE = "${DOCKERHUB_USERNAME}/smartphone-backend"
        FRONTEND_IMAGE = "${DOCKERHUB_USERNAME}/smartphone-frontend"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Configuration de l'application
        BACKEND_PORT = '5000'
        FRONTEND_PORT = '80'
        MONGO_PORT = '27017'
        
        // Configuration SonarQube
        SONAR_PROJECT_KEY = 'Smartphone-Management-App'
        
        // Configuration Email - À MODIFIER
        RECIPIENT_EMAIL = 'mbenguemouhamadoumansour@gmail.com'  // ⚠️ MODIFIEZ ICI
    }
    
    stages {
        stage('🧹 Cleanup Workspace') {
            steps {
                echo 'Nettoyage du workspace...'
                cleanWs()
            }
        }
        
        stage('🔄 Checkout from GitHub') {
            steps {
                echo 'Récupération du code depuis GitHub...'
                checkout scm
            }
        }
        
        stage('📦 Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            echo 'Installation des dépendances backend...'
                            sh 'npm install'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            echo 'Installation des dépendances frontend...'
                            sh 'npm install'
                        }
                    }
                }
            }
        }
        
        stage('🔍 SonarQube Analysis') {
            steps {
                echo 'Analyse de la qualité du code avec SonarQube...'
                script {
                    def scannerHome = tool 'SonarScanner'
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://localhost:9000
                        """
                    }
                }
            }
        }
        
        stage('🚦 Quality Gate') {
            steps {
                echo 'Vérification du Quality Gate SonarQube...'
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline interrompu : Quality Gate échoué avec le statut ${qg.status}"
                        }
                        echo '✅ Quality Gate passé avec succès !'
                    }
                }
            }
        }
        
        stage('🐳 Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('backend') {
                            echo 'Construction de l\'image Docker backend...'
                            sh """
                                docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} .
                                docker tag ${BACKEND_IMAGE}:${IMAGE_TAG} ${BACKEND_IMAGE}:latest
                            """
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('frontend') {
                            echo 'Construction de l\'image Docker frontend...'
                            sh """
                                docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} .
                                docker tag ${FRONTEND_IMAGE}:${IMAGE_TAG} ${FRONTEND_IMAGE}:latest
                            """
                        }
                    }
                }
            }
        }
        
        stage('📤 Push to DockerHub') {
            steps {
                echo 'Push des images vers DockerHub...'
                script {
                    sh """
                        echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin
                        
                        # Push Backend
                        docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                        docker push ${BACKEND_IMAGE}:latest
                        
                        # Push Frontend
                        docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                        docker push ${FRONTEND_IMAGE}:latest
                        
                        docker logout
                    """
                }
                echo '✅ Images poussées avec succès sur DockerHub'
            }
        }
        
        stage('🛑 Stop Old Containers') {
            steps {
                echo 'Arrêt des anciens conteneurs...'
                script {
                    sh '''
                        docker-compose down || true
                        docker stop smartphone-backend smartphone-frontend smartphone-mongo || true
                        docker rm smartphone-backend smartphone-frontend smartphone-mongo || true
                    '''
                }
            }
        }
        
        stage('🚀 Deploy Locally with Docker Compose') {
            steps {
                echo 'Déploiement local avec Docker Compose...'
                script {
                    // Mettre à jour les variables d'environnement
                    sh """
                        export BACKEND_IMAGE=${BACKEND_IMAGE}:latest
                        export FRONTEND_IMAGE=${FRONTEND_IMAGE}:latest
                        docker-compose up -d
                    """
                    
                    echo 'Attente du démarrage des conteneurs...'
                    sleep 20
                }
            }
        }
        
        stage('💚 Health Checks') {
            steps {
                echo 'Vérification de santé des services...'
                script {
                    // Vérifier que les conteneurs sont en cours d'exécution
                    sh '''
                        echo "Vérification des conteneurs..."
                        docker ps
                    '''
                    
                    // Health check backend
                    retry(5) {
                        sleep 5
                        sh """
                            echo "Test du backend sur le port ${BACKEND_PORT}..."
                            curl -f http://localhost:${BACKEND_PORT} || exit 1
                        """
                    }
                    echo '✅ Backend est opérationnel'
                    
                    // Health check frontend
                    retry(5) {
                        sleep 5
                        sh """
                            echo "Test du frontend sur le port ${FRONTEND_PORT}..."
                            curl -f http://localhost:${FRONTEND_PORT} || exit 1
                        """
                    }
                    echo '✅ Frontend est opérationnel'
                }
            }
        }
        
        stage('📊 Display Deployment Info') {
            steps {
                script {
                    def backendUrl = "http://localhost:${BACKEND_PORT}"
                    def frontendUrl = "http://localhost:${FRONTEND_PORT}"
                    def sonarUrl = "http://localhost:9000/dashboard?id=${SONAR_PROJECT_KEY}"
                    
                    echo """
╔════════════════════════════════════════════════════════════╗
║           🎉 DÉPLOIEMENT RÉUSSI ! 🎉                      ║
╠════════════════════════════════════════════════════════════╣
║  📱 Application Smartphone Management                      ║
║                                                            ║
║  🌐 Frontend:  ${frontendUrl}                             ║
║  🔧 Backend:   ${backendUrl}                              ║
║  🗄️  MongoDB:  mongodb://localhost:${MONGO_PORT}         ║
║                                                            ║
║  📊 SonarQube: ${sonarUrl}                                ║
║  🐳 DockerHub: hub.docker.com/u/${DOCKERHUB_USERNAME}     ║
║                                                            ║
║  🏷️  Build:     #${BUILD_NUMBER}                          ║
║  📦 Images:                                                ║
║     - ${BACKEND_IMAGE}:${IMAGE_TAG}                       ║
║     - ${FRONTEND_IMAGE}:${IMAGE_TAG}                      ║
╚════════════════════════════════════════════════════════════╝
                    """
                }
            }
        }
    }
    
    post {
        always {
            echo '🧹 Nettoyage des images Docker inutilisées...'
            sh 'docker image prune -f || true'
        }
        
        success {
            echo '✅ Pipeline exécuté avec succès !'
            script {
                def backendUrl = "http://localhost:${BACKEND_PORT}"
                def frontendUrl = "http://localhost:${FRONTEND_PORT}"
                def sonarUrl = "http://localhost:9000/dashboard?id=${SONAR_PROJECT_KEY}"
                
                emailext(
                    subject: "✅ SUCCESS: Smartphone App Build #${BUILD_NUMBER}",
                    body: """
<html>
<body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px;">
        <h1 style="color: #28a745;">✅ Déploiement réussi !</h1>
        <h2>Smartphone Management Application</h2>
        
        <div style="background-color: #e8f5e9; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3>📱 Accès à l'application :</h3>
            <ul>
                <li><strong>Frontend:</strong> <a href="${frontendUrl}">${frontendUrl}</a></li>
                <li><strong>Backend:</strong> <a href="${backendUrl}">${backendUrl}</a></li>
                <li><strong>SonarQube:</strong> <a href="${sonarUrl}">Voir l'analyse</a></li>
            </ul>
        </div>
        
        <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px;">
            <h3>📦 Build Info :</h3>
            <ul>
                <li><strong>Build:</strong> #${BUILD_NUMBER}</li>
                <li><strong>Images:</strong></li>
                <ul style="font-family: monospace; font-size: 12px;">
                    <li>${BACKEND_IMAGE}:${IMAGE_TAG}</li>
                    <li>${FRONTEND_IMAGE}:${IMAGE_TAG}</li>
                </ul>
            </ul>
        </div>
        
        <p style="margin-top: 30px; color: #666; font-size: 12px;">
            <a href="${BUILD_URL}">Voir les détails du build</a>
        </p>
    </div>
</body>
</html>
                    """,
                    to: "${RECIPIENT_EMAIL}",
                    mimeType: 'text/html'
                )
            }
        }
        
        failure {
            echo '❌ Le pipeline a échoué !'
            sh 'docker-compose down || true'
            
            emailext(
                subject: "❌ FAILED: Smartphone App Build #${BUILD_NUMBER}",
                body: """
<html>
<body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px;">
        <h1 style="color: #dc3545;">❌ Échec du déploiement</h1>
        <p>Le build #${BUILD_NUMBER} a échoué.</p>
        <div style="text-align: center; margin-top: 30px;">
            <a href="${BUILD_URL}console" style="background-color: #dc3545; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px;">
                📋 Voir les logs
            </a>
        </div>
    </div>
</body>
</html>
                """,
                to: "${RECIPIENT_EMAIL}",
                mimeType: 'text/html'
            )
        }
    }
}
